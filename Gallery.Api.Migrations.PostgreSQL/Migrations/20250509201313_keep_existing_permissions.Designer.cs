/*
 Copyright 2025 Carnegie Mellon University. All Rights Reserved. 
 Released under a MIT (SEI)-style license. See LICENSE.md in the project root for license information.
*/

ï»¿// <auto-generated />
using System;
using Gallery.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gallery.Api.Migrations.PostgreSQL.Migrations
{
    [DbContext(typeof(GalleryDbContext))]
    [Migration("20250509201313_keep_existing_permissions")]
    partial class keep_existing_permissions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gallery.Api.Data.Models.ArticleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_id");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("collection_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_posted");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("ExhibitId")
                        .HasColumnType("uuid")
                        .HasColumnName("exhibit_id");

                    b.Property<int>("Inject")
                        .HasColumnType("integer")
                        .HasColumnName("inject");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Move")
                        .HasColumnType("integer")
                        .HasColumnName("move");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("OpenInNewTab")
                        .HasColumnType("boolean")
                        .HasColumnName("open_in_new_tab");

                    b.Property<string>("SourceName")
                        .HasColumnType("text")
                        .HasColumnName("source_name");

                    b.Property<int>("SourceType")
                        .HasColumnType("integer")
                        .HasColumnName("source_type");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("ExhibitId");

                    b.ToTable("articles");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.CardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("collection_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Inject")
                        .HasColumnType("integer")
                        .HasColumnName("inject");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Move")
                        .HasColumnType("integer")
                        .HasColumnName("move");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("cards");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.CollectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("collections");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.CollectionMembershipEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("collection_id");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("f870d8ee-7332-4f7f-8ee0-63bd07cfd7e4"))
                        .HasColumnName("role_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("CollectionId", "UserId", "GroupId")
                        .IsUnique();

                    b.ToTable("collection_memberships");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.CollectionRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("AllPermissions")
                        .HasColumnType("boolean")
                        .HasColumnName("all_permissions");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int[]>("Permissions")
                        .HasColumnType("integer[]")
                        .HasColumnName("permissions");

                    b.HasKey("Id");

                    b.ToTable("collection_roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a3f26cd-9d99-4b98-b914-12931e786198"),
                            AllPermissions = true,
                            Description = "Can perform all actions on the Collection",
                            Name = "Manager",
                            Permissions = new int[0]
                        },
                        new
                        {
                            Id = new Guid("39aa296e-05ba-4fb0-8d74-c92cf3354c6f"),
                            AllPermissions = false,
                            Description = "Has read only access to the Collection",
                            Name = "Observer",
                            Permissions = new[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("f870d8ee-7332-4f7f-8ee0-63bd07cfd7e4"),
                            AllPermissions = false,
                            Description = "Has read only access to the Collection",
                            Name = "Member",
                            Permissions = new[] { 0, 1 }
                        });
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.ExhibitEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("collection_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<int>("CurrentInject")
                        .HasColumnType("integer")
                        .HasColumnName("current_inject");

                    b.Property<int>("CurrentMove")
                        .HasColumnType("integer")
                        .HasColumnName("current_move");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ScenarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("scenario_id");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("exhibits");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.ExhibitMembershipEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("ExhibitId")
                        .HasColumnType("uuid")
                        .HasColumnName("exhibit_id");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("f870d8ee-7332-4f7f-8ee0-63bd07cfd7e4"))
                        .HasColumnName("role_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("ExhibitId", "UserId", "GroupId")
                        .IsUnique();

                    b.ToTable("exhibit_memberships");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.ExhibitRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("AllPermissions")
                        .HasColumnType("boolean")
                        .HasColumnName("all_permissions");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int[]>("Permissions")
                        .HasColumnType("integer[]")
                        .HasColumnName("permissions");

                    b.HasKey("Id");

                    b.ToTable("exhibit_roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a3f26cd-9d99-4b98-b914-12931e786198"),
                            AllPermissions = true,
                            Description = "Can perform all actions on the Exhibit",
                            Name = "Manager",
                            Permissions = new int[0]
                        },
                        new
                        {
                            Id = new Guid("39aa296e-05ba-4fb0-8d74-c92cf3354c6f"),
                            AllPermissions = false,
                            Description = "Has read only access to the Exhibit",
                            Name = "Observer",
                            Permissions = new[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("f870d8ee-7332-4f7f-8ee0-63bd07cfd7e4"),
                            AllPermissions = false,
                            Description = "Has read only access to the Exhibit",
                            Name = "Member",
                            Permissions = new[] { 0, 1 }
                        });
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.ExhibitTeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("ExhibitId")
                        .HasColumnType("uuid")
                        .HasColumnName("exhibit_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("ExhibitId", "TeamId")
                        .IsUnique();

                    b.ToTable("exhibit_teams");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.GroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.GroupMembershipEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "UserId")
                        .IsUnique();

                    b.ToTable("group_memberships");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("read_only");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Key", "Value")
                        .IsUnique();

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.SystemRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("AllPermissions")
                        .HasColumnType("boolean")
                        .HasColumnName("all_permissions");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Immutable")
                        .HasColumnType("boolean")
                        .HasColumnName("immutable");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int[]>("Permissions")
                        .HasColumnType("integer[]")
                        .HasColumnName("permissions");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("system_roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f35e8fff-f996-4cba-b303-3ba515ad8d2f"),
                            AllPermissions = true,
                            Description = "Can perform all actions",
                            Immutable = true,
                            Name = "Administrator",
                            Permissions = new int[0]
                        },
                        new
                        {
                            Id = new Guid("d80b73c3-95d7-4468-8650-c62bbd082507"),
                            AllPermissions = false,
                            Description = "Can create and manage their own Exhibit Templates and Exhibits.",
                            Immutable = false,
                            Name = "Content Developer",
                            Permissions = new[] { 0, 4, 7 }
                        },
                        new
                        {
                            Id = new Guid("1da3027e-725d-4753-9455-a836ed9bdb1e"),
                            AllPermissions = false,
                            Description = "Can View all Exhibit Templates and Exhibits, but cannot make any changes.",
                            Immutable = false,
                            Name = "Observer",
                            Permissions = new[] { 1, 5, 8, 10, 12 }
                        });
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.TeamArticleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid")
                        .HasColumnName("article_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("ExhibitId")
                        .HasColumnType("uuid")
                        .HasColumnName("exhibit_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("TeamId");

                    b.HasIndex("ExhibitId", "TeamId", "ArticleId")
                        .IsUnique();

                    b.ToTable("team_articles");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.TeamCardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("CanPostArticles")
                        .HasColumnType("boolean")
                        .HasColumnName("can_post_articles");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("Inject")
                        .HasColumnType("integer")
                        .HasColumnName("inject");

                    b.Property<bool>("IsShownOnWall")
                        .HasColumnType("boolean")
                        .HasColumnName("is_shown_on_wall");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Move")
                        .HasColumnType("integer")
                        .HasColumnName("move");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("TeamId", "CardId")
                        .IsUnique();

                    b.ToTable("team_cards");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid?>("ExhibitId")
                        .HasColumnType("uuid")
                        .HasColumnName("exhibit_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id");

                    b.HasIndex("ExhibitId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("teams");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.TeamUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("IsObserver")
                        .HasColumnType("boolean")
                        .HasColumnName("is_observer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId", "TeamId")
                        .IsUnique();

                    b.ToTable("team_users");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.UserArticleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("ActualDatePosted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_date_posted");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid")
                        .HasColumnName("article_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("ExhibitId")
                        .HasColumnType("uuid")
                        .HasColumnName("exhibit_id");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.HasIndex("ExhibitId", "UserId", "ArticleId")
                        .IsUnique();

                    b.ToTable("user_articles");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.UserPermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId", "PermissionId")
                        .IsUnique();

                    b.ToTable("user_permissions");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.ArticleEntity", b =>
                {
                    b.HasOne("Gallery.Api.Data.Models.CardEntity", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("Gallery.Api.Data.Models.CollectionEntity", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gallery.Api.Data.Models.CardEntity", "Exhibit")
                        .WithMany()
                        .HasForeignKey("ExhibitId");

                    b.Navigation("Card");

                    b.Navigation("Collection");

                    b.Navigation("Exhibit");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.CardEntity", b =>
                {
                    b.HasOne("Gallery.Api.Data.Models.CollectionEntity", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.CollectionMembershipEntity", b =>
                {
                    b.HasOne("Gallery.Api.Data.Models.CollectionEntity", "Collection")
                        .WithMany("Memberships")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gallery.Api.Data.Models.GroupEntity", "Group")
                        .WithMany("CollectionMemberships")
                        .HasForeignKey("GroupId");

                    b.HasOne("Gallery.Api.Data.Models.CollectionRoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gallery.Api.Data.Models.UserEntity", "User")
                        .WithMany("CollectionMemberships")
                        .HasForeignKey("UserId");

                    b.Navigation("Collection");

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.ExhibitEntity", b =>
                {
                    b.HasOne("Gallery.Api.Data.Models.CollectionEntity", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.ExhibitMembershipEntity", b =>
                {
                    b.HasOne("Gallery.Api.Data.Models.ExhibitEntity", "Exhibit")
                        .WithMany("Memberships")
                        .HasForeignKey("ExhibitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gallery.Api.Data.Models.GroupEntity", "Group")
                        .WithMany("ExhibitMemberships")
                        .HasForeignKey("GroupId");

                    b.HasOne("Gallery.Api.Data.Models.ExhibitRoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gallery.Api.Data.Models.UserEntity", "User")
                        .WithMany("ExhibitMemberships")
                        .HasForeignKey("UserId");

                    b.Navigation("Exhibit");

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.ExhibitTeamEntity", b =>
                {
                    b.HasOne("Gallery.Api.Data.Models.ExhibitEntity", "Exhibit")
                        .WithMany()
                        .HasForeignKey("ExhibitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gallery.Api.Data.Models.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exhibit");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.GroupMembershipEntity", b =>
                {
                    b.HasOne("Gallery.Api.Data.Models.GroupEntity", "Group")
                        .WithMany("Memberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gallery.Api.Data.Models.UserEntity", "User")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.TeamArticleEntity", b =>
                {
                    b.HasOne("Gallery.Api.Data.Models.ArticleEntity", "Article")
                        .WithMany("TeamArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gallery.Api.Data.Models.ExhibitEntity", "Exhibit")
                        .WithMany()
                        .HasForeignKey("ExhibitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gallery.Api.Data.Models.TeamEntity", "Team")
                        .WithMany("TeamArticles")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Exhibit");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.TeamCardEntity", b =>
                {
                    b.HasOne("Gallery.Api.Data.Models.CardEntity", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gallery.Api.Data.Models.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.TeamEntity", b =>
                {
                    b.HasOne("Gallery.Api.Data.Models.ExhibitEntity", "Exhibit")
                        .WithMany("Teams")
                        .HasForeignKey("ExhibitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Exhibit");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.TeamUserEntity", b =>
                {
                    b.HasOne("Gallery.Api.Data.Models.TeamEntity", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gallery.Api.Data.Models.UserEntity", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.UserArticleEntity", b =>
                {
                    b.HasOne("Gallery.Api.Data.Models.ArticleEntity", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gallery.Api.Data.Models.ExhibitEntity", "Exhibit")
                        .WithMany()
                        .HasForeignKey("ExhibitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gallery.Api.Data.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Exhibit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.UserEntity", b =>
                {
                    b.HasOne("Gallery.Api.Data.Models.SystemRoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.UserPermissionEntity", b =>
                {
                    b.HasOne("Gallery.Api.Data.Models.PermissionEntity", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gallery.Api.Data.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.ArticleEntity", b =>
                {
                    b.Navigation("TeamArticles");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.CollectionEntity", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.ExhibitEntity", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.GroupEntity", b =>
                {
                    b.Navigation("CollectionMemberships");

                    b.Navigation("ExhibitMemberships");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.PermissionEntity", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.TeamEntity", b =>
                {
                    b.Navigation("TeamArticles");

                    b.Navigation("TeamUsers");
                });

            modelBuilder.Entity("Gallery.Api.Data.Models.UserEntity", b =>
                {
                    b.Navigation("CollectionMemberships");

                    b.Navigation("ExhibitMemberships");

                    b.Navigation("GroupMemberships");

                    b.Navigation("TeamUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
